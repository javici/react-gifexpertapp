{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","gif/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","apiUrl","encodeURI","fetch","res","json","data","gifs","map","gif","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAhBc,SAACP,GAAD,OAAWF,EAAcE,EAAMQ,OAAOF,YCRvDG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACI,yBAAKC,UAAU,0BACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACD,GACRC,EAHa,iDAGsCC,UAAUH,GAHhD,mBAEL,GAFK,oBACJ,oCADI,SAKDI,MAAMF,GALL,cAKbG,EALa,gBAMIA,EAAIC,OANR,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAGlB,MAAO,CAAEC,GAFoDD,EAArDC,GAEKjB,MAFgDgB,EAAjDhB,MAEQC,IAFyCe,EAA1CE,OAAUC,iBAAoBlB,QATlC,kBAcZa,GAdY,4CAAH,sDCKPM,EAAU,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNnB,EAAQC,GAAUmB,MAAK,SAAAX,GACnBS,EAAS,CACLV,KAAMC,EACNO,SAAS,SAGlB,CAACf,IAGGgB,EDb2BI,CAAapB,GAAjCY,EAFuB,EAE7BL,KAAcQ,EAFe,EAEfA,QACtB,OACI,oCACI,gCAAMf,GACLe,GAAW,sCACZ,wBAAInB,UAAU,aAENgB,EAAOH,KAAI,gBAAGE,EAAH,EAAGA,GAAIjB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,IAAd,OAEP,kBAAC,EAAD,CACI0B,IAAKV,EACLjB,MAAOA,EACPC,IAAKA,UEfpB2B,EAAe,WAAM,MAGM1C,mBAAS,CAAC,cAHhB,mBAGvB2C,EAHuB,KAGX5C,EAHW,KAQ9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ4C,EAAWd,KAAI,SAAAT,GAAQ,OAEnB,kBAAC,EAAD,CACIqB,IAAKrB,EACLA,SAAUA,U,MCnBtCwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.11e6c1bf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n// export const AddCategory = (props) => {\n// props.setCategories(...)\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (event) => setInputValue(event.target.value);\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cat => [inputValue, ...cat]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <div className=\"card animate__bounceIn\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n\n\n\n\n","export const getGifs = async (category) => {\n    const apiKey = 'ikHzDC5JVTzIMjwjLvN8SsN5wLdI4d3L'\n    const limit = 10;\n    const apiUrl = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}=&limit=${limit}&api_key=${apiKey}`\n\n    const res = await fetch(apiUrl);\n    const { data } = await res.json();\n\n    const gifs = data.map(gif => {\n        const { id, title, images: { downsized_medium: { url } } } = gif;\n\n        return { id, title, url };\n    });\n\n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n    return (\n        <>\n            <h3> {category}</h3>\n            {loading && <p>Loading</p>}\n            <ol className=\"card-grid\">\n                {\n                    images.map(({ id, title, url }) =>\n\n                        <GifGridItem\n                            key={id}\n                            title={title}\n                            url={url}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(gifs => {\n            setstate({\n                data: gifs,\n                loading: false\n            })\n        })\n    }, [category]);\n\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from '../components/AddCategory';\nimport { GifGrid } from '../components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    // HOOOOOK!\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => setCategories([...categories, 'HunterXHunter']);\n    // const handleAdd = () => setCategories(cat => [...categories, 'HunterXHunter']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(category =>\n\n                        <GifGrid\n                            key={category}\n                            category={category} />\n                    )\n                }\n            </ol>\n\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './gif/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}